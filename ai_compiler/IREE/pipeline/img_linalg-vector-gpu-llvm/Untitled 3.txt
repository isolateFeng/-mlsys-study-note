#map = affine_map<()[s0] -> (s0 * 16)>
#map1 = affine_map<()[s0] -> (s0 + 8)>
#map2 = affine_map<()[s0] -> ((s0 floordiv 32) * 16)>
module {
  hal.executable private @matmul {
    builtin.module {
      func.func @matmul() {
        %0 = llvm.mlir.constant(0 : index) : i64
        %1 = builtin.unrealized_conversion_cast %0 : i64 to index
        %2 = llvm.mlir.constant(0.000000e+00 : f32) : f32
        %3 = llvm.mlir.constant(16 : index) : i64
        %4 = builtin.unrealized_conversion_cast %3 : i64 to index
        %5 = llvm.mlir.constant(32 : index) : i64
        %6 = builtin.unrealized_conversion_cast %5 : i64 to index
        %7 = llvm.mlir.undef : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
        %8 = llvm.insertvalue %2, %7[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %9 = llvm.insertvalue %2, %8[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %10 = llvm.insertvalue %2, %9[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %11 = llvm.insertvalue %2, %10[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %12 = llvm.insertvalue %2, %11[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %13 = llvm.insertvalue %2, %12[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %14 = llvm.insertvalue %2, %13[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %15 = llvm.insertvalue %2, %14[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %16 = builtin.unrealized_conversion_cast %15 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> to !gpu.mma_matrix<16x16xf32, "COp">
        %17 = hal.interface.binding.subspan set(0) binding(0) type(storage_buffer) alignment(64) offset(%1) : memref<32x32xf32>
        %18 = builtin.unrealized_conversion_cast %17 : memref<32x32xf32> to !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
        %19 = llvm.extractvalue %18[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
        %20 = llvm.mlir.constant(0 : index) : i64
        %21 = llvm.mlir.constant(63 : index) : i64
        %22 = llvm.ptrtoint %19 : !llvm.ptr to i64
        %23 = llvm.and %22, %21  : i64
        %24 = llvm.icmp "eq" %23, %20 : i64
        "llvm.intr.assume"(%24) : (i1) -> ()
        %25 = hal.interface.binding.subspan set(0) binding(1) type(storage_buffer) alignment(64) offset(%1) : memref<32x32xf32>
        %26 = builtin.unrealized_conversion_cast %25 : memref<32x32xf32> to !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
        %27 = llvm.extractvalue %26[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
        %28 = llvm.mlir.constant(0 : index) : i64
        %29 = llvm.mlir.constant(63 : index) : i64
        %30 = llvm.ptrtoint %27 : !llvm.ptr to i64
        %31 = llvm.and %30, %29  : i64
        %32 = llvm.icmp "eq" %31, %28 : i64
        "llvm.intr.assume"(%32) : (i1) -> ()
        %33 = hal.interface.binding.subspan set(0) binding(2) type(storage_buffer) alignment(64) offset(%1) : memref<32x32xf32>
        %34 = builtin.unrealized_conversion_cast %33 : memref<32x32xf32> to !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
        %35 = llvm.extractvalue %34[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
        %36 = llvm.mlir.constant(0 : index) : i64
        %37 = llvm.mlir.constant(63 : index) : i64
        %38 = llvm.ptrtoint %35 : !llvm.ptr to i64
        %39 = llvm.and %38, %37  : i64
        %40 = llvm.icmp "eq" %39, %36 : i64
        "llvm.intr.assume"(%40) : (i1) -> ()
        %41 = nvvm.read.ptx.sreg.tid.x : i32
        %42 = llvm.sext %41 : i32 to i64
        %43 = builtin.unrealized_conversion_cast %42 : i64 to index
        %44 = nvvm.read.ptx.sreg.tid.y : i32
        %45 = llvm.sext %44 : i32 to i64
        %46 = builtin.unrealized_conversion_cast %45 : i64 to index
        %47 = scf.for %arg0 = %1 to %6 step %4 iter_args(%arg1 = %16) -> (!gpu.mma_matrix<16x16xf32, "COp">) {
          %67 = builtin.unrealized_conversion_cast %arg0 : index to i64
          %68 = builtin.unrealized_conversion_cast %arg1 : !gpu.mma_matrix<16x16xf32, "COp"> to !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
          %69 = affine.apply #map()[%46]
          %70 = builtin.unrealized_conversion_cast %69 : index to i64
          %71 = llvm.extractvalue %18[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
          %72 = llvm.mlir.constant(32 : index) : i64
          %73 = llvm.mul %70, %72  : i64
          %74 = llvm.add %73, %67  : i64
          %75 = llvm.getelementptr %71[%74] : (!llvm.ptr, i64) -> !llvm.ptr, f32
          %76 = llvm.mlir.constant(32 : index) : i32
          %77 = nvvm.wmma.load %75, %76 {eltype = #nvvm.mma_type<tf32>, frag = #nvvm.mma_frag<a>, k = 8 : i32, layout = #nvvm.mma_layout<row>, m = 16 : i32, n = 16 : i32} : (!llvm.ptr) -> !llvm.struct<(i32, i32, i32, i32)>
          %78 = affine.apply #map1()[%arg0]
          %79 = builtin.unrealized_conversion_cast %78 : index to i64
          %80 = llvm.extractvalue %18[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
          %81 = llvm.mlir.constant(32 : index) : i64
          %82 = llvm.mul %70, %81  : i64
          %83 = llvm.add %82, %79  : i64
          %84 = llvm.getelementptr %80[%83] : (!llvm.ptr, i64) -> !llvm.ptr, f32
          %85 = llvm.mlir.constant(32 : index) : i32
          %86 = nvvm.wmma.load %84, %85 {eltype = #nvvm.mma_type<tf32>, frag = #nvvm.mma_frag<a>, k = 8 : i32, layout = #nvvm.mma_layout<row>, m = 16 : i32, n = 16 : i32} : (!llvm.ptr) -> !llvm.struct<(i32, i32, i32, i32)>
          %87 = affine.apply #map2()[%43]
          %88 = builtin.unrealized_conversion_cast %87 : index to i64
          %89 = llvm.extractvalue %26[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
          %90 = llvm.mlir.constant(32 : index) : i64
          %91 = llvm.mul %67, %90  : i64
          %92 = llvm.add %91, %88  : i64
          %93 = llvm.getelementptr %89[%92] : (!llvm.ptr, i64) -> !llvm.ptr, f32
          %94 = llvm.mlir.constant(32 : index) : i32
          %95 = nvvm.wmma.load %93, %94 {eltype = #nvvm.mma_type<tf32>, frag = #nvvm.mma_frag<b>, k = 8 : i32, layout = #nvvm.mma_layout<row>, m = 16 : i32, n = 16 : i32} : (!llvm.ptr) -> !llvm.struct<(i32, i32, i32, i32)>
          %96 = affine.apply #map1()[%arg0]
          %97 = builtin.unrealized_conversion_cast %96 : index to i64
          %98 = llvm.extractvalue %26[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
          %99 = llvm.mlir.constant(32 : index) : i64
          %100 = llvm.mul %97, %99  : i64
          %101 = llvm.add %100, %88  : i64
          %102 = llvm.getelementptr %98[%101] : (!llvm.ptr, i64) -> !llvm.ptr, f32
          %103 = llvm.mlir.constant(32 : index) : i32
          %104 = nvvm.wmma.load %102, %103 {eltype = #nvvm.mma_type<tf32>, frag = #nvvm.mma_frag<b>, k = 8 : i32, layout = #nvvm.mma_layout<row>, m = 16 : i32, n = 16 : i32} : (!llvm.ptr) -> !llvm.struct<(i32, i32, i32, i32)>
          %105 = llvm.extractvalue %77[0] : !llvm.struct<(i32, i32, i32, i32)> 
          %106 = llvm.extractvalue %77[1] : !llvm.struct<(i32, i32, i32, i32)> 
          %107 = llvm.extractvalue %77[2] : !llvm.struct<(i32, i32, i32, i32)> 
          %108 = llvm.extractvalue %77[3] : !llvm.struct<(i32, i32, i32, i32)> 
          %109 = llvm.extractvalue %95[0] : !llvm.struct<(i32, i32, i32, i32)> 
          %110 = llvm.extractvalue %95[1] : !llvm.struct<(i32, i32, i32, i32)> 
          %111 = llvm.extractvalue %95[2] : !llvm.struct<(i32, i32, i32, i32)> 
          %112 = llvm.extractvalue %95[3] : !llvm.struct<(i32, i32, i32, i32)> 
          %113 = llvm.extractvalue %68[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %114 = llvm.extractvalue %68[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %115 = llvm.extractvalue %68[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %116 = llvm.extractvalue %68[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %117 = llvm.extractvalue %68[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %118 = llvm.extractvalue %68[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %119 = llvm.extractvalue %68[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %120 = llvm.extractvalue %68[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %121 = nvvm.wmma.mma %105, %106, %107, %108, %109, %110, %111, %112, %113, %114, %115, %116, %117, %118, %119, %120 {eltypeA = #nvvm.mma_type<tf32>, eltypeB = #nvvm.mma_type<f32>, k = 8 : i32, layoutA = #nvvm.mma_layout<row>, layoutB = #nvvm.mma_layout<row>, m = 16 : i32, n = 16 : i32} : (i32, i32, i32, i32, i32, i32, i32, i32, f32, f32, f32, f32, f32, f32, f32, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
          %122 = llvm.extractvalue %86[0] : !llvm.struct<(i32, i32, i32, i32)> 
          %123 = llvm.extractvalue %86[1] : !llvm.struct<(i32, i32, i32, i32)> 
          %124 = llvm.extractvalue %86[2] : !llvm.struct<(i32, i32, i32, i32)> 
          %125 = llvm.extractvalue %86[3] : !llvm.struct<(i32, i32, i32, i32)> 
          %126 = llvm.extractvalue %104[0] : !llvm.struct<(i32, i32, i32, i32)> 
          %127 = llvm.extractvalue %104[1] : !llvm.struct<(i32, i32, i32, i32)> 
          %128 = llvm.extractvalue %104[2] : !llvm.struct<(i32, i32, i32, i32)> 
          %129 = llvm.extractvalue %104[3] : !llvm.struct<(i32, i32, i32, i32)> 
          %130 = llvm.extractvalue %121[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %131 = llvm.extractvalue %121[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %132 = llvm.extractvalue %121[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %133 = llvm.extractvalue %121[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %134 = llvm.extractvalue %121[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %135 = llvm.extractvalue %121[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %136 = llvm.extractvalue %121[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %137 = llvm.extractvalue %121[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
          %138 = nvvm.wmma.mma %122, %123, %124, %125, %126, %127, %128, %129, %130, %131, %132, %133, %134, %135, %136, %137 {eltypeA = #nvvm.mma_type<tf32>, eltypeB = #nvvm.mma_type<f32>, k = 8 : i32, layoutA = #nvvm.mma_layout<row>, layoutB = #nvvm.mma_layout<row>, m = 16 : i32, n = 16 : i32} : (i32, i32, i32, i32, i32, i32, i32, i32, f32, f32, f32, f32, f32, f32, f32, f32) -> !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
          %139 = builtin.unrealized_conversion_cast %138 : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> to !gpu.mma_matrix<16x16xf32, "COp">
          scf.yield %139 : !gpu.mma_matrix<16x16xf32, "COp">
        }
        %48 = builtin.unrealized_conversion_cast %47 : !gpu.mma_matrix<16x16xf32, "COp"> to !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)>
        %49 = affine.apply #map()[%46]
        %50 = builtin.unrealized_conversion_cast %49 : index to i64
        %51 = affine.apply #map2()[%43]
        %52 = builtin.unrealized_conversion_cast %51 : index to i64
        %53 = llvm.extractvalue %48[0] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %54 = llvm.extractvalue %48[1] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %55 = llvm.extractvalue %48[2] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %56 = llvm.extractvalue %48[3] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %57 = llvm.extractvalue %48[4] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %58 = llvm.extractvalue %48[5] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %59 = llvm.extractvalue %48[6] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %60 = llvm.extractvalue %48[7] : !llvm.struct<(f32, f32, f32, f32, f32, f32, f32, f32)> 
        %61 = llvm.extractvalue %34[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
        %62 = llvm.mlir.constant(32 : index) : i64
        %63 = llvm.mul %50, %62  : i64
        %64 = llvm.add %63, %52  : i64
        %65 = llvm.getelementptr %61[%64] : (!llvm.ptr, i64) -> !llvm.ptr, f32
        %66 = llvm.mlir.constant(32 : index) : i32
        nvvm.wmma.store %65, %66, %53, %54, %55, %56, %57, %58, %59, %60 {eltype = #nvvm.mma_type<f32>, k = 16 : i32, layout = #nvvm.mma_layout<row>, m = 16 : i32, n = 16 : i32} : !llvm.ptr, f32, f32, f32, f32, f32, f32, f32, f32
        llvm.return
      }
    }
  }
}

